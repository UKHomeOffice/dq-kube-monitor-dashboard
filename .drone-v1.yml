---
global-variables:
  vault-image: &vault-image docker.digital.homeoffice.gov.uk/dq/dq-vault-awscli:1.43
  trivy-image: &trivy-image quay.io/ukhomeofficedigital/trivyscanner:master
  kd-image: &kd-image quay.io/ukhomeofficedigital/kd

kind: pipeline
name: default
type: kubernetes

platform:
  os: linux
  arch: amd64

x-anchors:
  rotate-app-user-aws-key: &rotate-app-user-aws-key
    # Retrive vault secrets
    - vault read aws_dacc_dq/creds/drone > aws_creds.json
    - export LEASE_ID=$(cat aws_creds.json | grep lease_id | awk -F ' ' '{print $2}')
    # Update the token TTL to 10mins
    - vault lease renew -increment=600 $${LEASE_ID}
    # Get the AWS credentials
    - export AWS_ACCESS_KEY_ID=$(cat aws_creds.json | grep access_key | awk -F ' ' '{print $2}')
    - export AWS_SECRET_ACCESS_KEY=$(cat aws_creds.json | grep secret_key | awk -F ' ' '{print $2}')
    - export AWS_DEFAULT_REGION=eu-west-2
    # Since AWS is eventually consistent we need to sleep a little while so the AWS key is created and made available
    - sleep 20
    # get app key id from ssm
    - export OLD_AWS_ACCESS_KEY_ID=$(aws ssm get-parameters --name $SSM_KEY_ID --query "Parameters[*].{Value:Value}" --with-decryption | grep Value | awk -F ' ' '{print $2}' | tr -d '"')
    # generate new key & id for app user
    - aws iam create-access-key --user-name $APP_USER_NAME > new-key.json
    - export NEW_AWS_ACCESS_KEY_ID=$(cat new-key.json | grep AccessKeyId | awk -F ' ' '{print $2}' | tr -d '"' | tr -d ',')
    - export NEW_AWS_SECRET_ACCESS_KEY=$(cat new-key.json | grep SecretAccessKey | awk -F ' ' '{print $2}' | tr -d '"' | tr -d ',')
    # push new key & id to SSM
    - aws ssm put-parameter --name $SSM_KEY_ID --type "SecureString" --value $NEW_AWS_ACCESS_KEY_ID --overwrite
    - aws ssm put-parameter --name $SSM_SECURE_KEY --type "SecureString" --value $NEW_AWS_SECRET_ACCESS_KEY --overwrite
    # delete old iam key &id
    - aws iam delete-access-key --access-key-id $OLD_AWS_ACCESS_KEY_ID --user-name $APP_USER_NAME
    # encode new key and id
    - echo "export AWS_ACCESS_KEY_ID=$(echo -n $NEW_AWS_ACCESS_KEY_ID | base64)" > new_iam_secret.sh
    - echo "export AWS_SECRET_ACCESS_KEY=$(echo -n $NEW_AWS_SECRET_ACCESS_KEY | base64)" >> new_iam_secret.sh

  deploy-to-k8s: &deploy-to-k8s
    - source new_iam_secret.sh
    - kd --delete --file deployment.yml
    - "kd -f pvc.yml -f service.yml -f secrets.yml -f aws_secrets.yml \
        -f network-policy.yml -f deployment.yml"

steps:
- name: build_monitor_image
  pull: if-not-exists
  image: plugins/docker
  settings:
    dockerfile: app/monitor/Dockerfile
    force_tag: true
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/dq-kube-monitor-dashboard
    tags:
    - ${DRONE_COMMIT_SHA}
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  when:
    branch:
      exclude:
      - master  
    event:
    - push

- name: build_master
  pull: if-not-exists
  image: plugins/docker
  settings:
    dockerfile: app/monitor/Dockerfile
    force_tag: true
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/dq-kube-monitor-dashboard
    tags:
    - latest
    - ${DRONE_COMMIT_SHA}
    - b${DRONE_BUILD_NUMBER}
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  when:
    event:
    - push
    branch:
    - master    

- name: trivy_scan
  pull: if-not-exists
  image: *trivy-image
  commands:
  - trivy --version
  - trivy image --ignore-unfixed --exit-code 0 --no-progress quay.io/ukhomeofficedigital/dq-kube-monitor-dashboard:${DRONE_COMMIT_SHA}
  when:
    branch:
      exclude:
      - master
    event:
    - push

- name: rotate_aws_keys_notprod
  pull: if-not-exists
  image: *vault-image
  commands:
    *rotate-app-user-aws-key
  environment:
    SSM_KEY_ID: monitor-user-id-apps-notprod-dq
    SSM_SECURE_KEY: monitor-user-key-apps-notprod-dq
    APP_USER_NAME:  iam-user-monitor-apps-notprod-dq
    ENV: notprod
    VAULT_ADDR:
      from_secret: VAULT_ADDR_NOTPROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_NOTPROD
  when:
    event:
      - push

- name: deploy_to_notprod
  pull: if-not-exists
  image: *kd-image
  commands:
    *deploy-to-k8s
  environment:
    AWS_DEFAULT_REGION:
      from_secret: AWS_DEFAULT_REGION
    ENV: notprod
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: dq-apps-notprod
    FMS_CERT:
      from_secret: NOTPROD_FMS_CERT
    FMS_KEY:
      from_secret: NOTPROD_FMS_KEY
    KUBE_SERVER:
      from_secret: NOTPROD_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: NOTPROD_KUBE_TOKEN
    TAB_ADMIN_PWD:
      from_secret: NOTPROD_TAB_ADMIN_PWD
    SLACK_URL:
      from_secret: NOTPROD_SLACK_URL
    CONTAINER_PORT:
      from_secret: CONTAINER_PORT
    EXTTAB_PORT:
      from_secret: EXTTAB_PORT      
    EXTTAB_EXPOSE_PORT:
      from_secret: EXTTAB_EXPOSE_PORT
    EXTTAB_IP:
      from_secret: EXTTAB_IP
    TABRDS_PORT:
      from_secret: TABRDS_PORT
    TABRDS_EXPOSE_PORT:
      from_secret: TABRDS_EXPOSE_PORT
    TABRDS_IP:
      from_secret: TABRDS_IP
    GAIT_PORT:
      from_secret: GAIT_PORT
    GAIT_EXPOSE_PORT:
      from_secret: GAIT_EXPOSE_PORT
    GAIT_IP:
      from_secret: GAIT_IP
    FMS_PORT:
      from_secret: FMS_PORT
    FMS_EXPOSE_PORT:
      from_secret: FMS_EXPOSE_PORT
    FMS_IP:
      from_secret: FMS_IP
    TAB_PORT:
      from_secret: TAB_PORT
    TAB_EXPOSE_PORT:
      from_secret: TAB_EXPOSE_PORT
    TAB_IP:
      from_secret: TAB_IP
    VOLUME_SIZE: 10Gi
    HAPROXY_SIDEKICK_VERSION: b80
  when:
    event:
    - push

- name: rotate_aws_keys_prod
  pull: if-not-exists
  image: *vault-image
  commands:
    *rotate-app-user-aws-key
  environment:
    SSM_KEY_ID: monitor-user-id-apps-prod-dq
    SSM_SECURE_KEY: monitor-user-key-apps-prod-dq
    APP_USER_NAME: iam-user-monitor-apps-prod-dq
    ENV: prod
    VAULT_ADDR:
      from_secret: VAULT_ADDR_PROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_PROD
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: deploy_to_prod
  pull: if-not-exists
  image: *kd-image
  commands:
    *deploy-to-k8s
  environment:
    AWS_DEFAULT_REGION:
      from_secret: AWS_DEFAULT_REGION
    ENV: prod
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: dq-apps
    FMS_CERT:
      from_secret: PROD_FMS_CERT
    FMS_KEY:
      from_secret: PROD_FMS_KEY
    KUBE_SERVER:
      from_secret: PROD_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: PROD_KUBE_TOKEN
    SLACK_URL:
      from_secret: PROD_SLACK_URL
    CONTAINER_PORT:
      from_secret: CONTAINER_PORT  
    TAB_ADMIN_PWD:
      from_secret: PROD_TAB_ADMIN_PWD
    EXTTAB_PORT:
      from_secret: EXTTAB_PORT      
    EXTTAB_EXPOSE_PORT:
      from_secret: EXTTAB_EXPOSE_PORT
    EXTTAB_IP:
      from_secret: EXTTAB_IP
    TABRDS_PORT:
      from_secret: TABRDS_PORT
    TABRDS_EXPOSE_PORT:
      from_secret: TABRDS_EXPOSE_PORT
    TABRDS_IP:
      from_secret: TABRDS_IP
    GAIT_PORT:
      from_secret: GAIT_PORT
    GAIT_EXPOSE_PORT:
      from_secret: GAIT_EXPOSE_PORT
    GAIT_IP:
      from_secret: GAIT_IP
    FMS_PORT:
      from_secret: FMS_PORT
    FMS_EXPOSE_PORT:
      from_secret: FMS_EXPOSE_PORT
    FMS_IP:
      from_secret: FMS_IP
    TAB_PORT:
      from_secret: TAB_PORT
    TAB_EXPOSE_PORT:
      from_secret: TAB_EXPOSE_PORT
    TAB_IP:
      from_secret: TAB_IP      
    VOLUME_SIZE: 10Gi
    HAPROXY_SIDEKICK_VERSION: b80
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: renew-vault-tokens
  pull: if-not-exists
  image: *vault-image
  commands:
    # Renew NotProd Drone Vault Token
    - export VAULT_TOKEN=$${VAULT_TOKEN_NOTPROD}
    - export VAULT_ADDR=$${VAULT_ADDR_NOTPROD}
    - vault token renew > /dev/null
    # Renew Prod Drone Vault Token
    - export VAULT_TOKEN=$${VAULT_TOKEN_PROD}
    - export VAULT_ADDR=$${VAULT_ADDR_PROD}
    - vault token renew > /dev/null
  environment:
    VAULT_ADDR_NOTPROD:
      from_secret: VAULT_ADDR_NOTPROD
    VAULT_TOKEN_NOTPROD:
      from_secret: VAULT_TOKEN_NOTPROD
    VAULT_ADDR_PROD:
      from_secret: VAULT_ADDR_PROD
    VAULT_TOKEN_PROD:
      from_secret: VAULT_TOKEN_PROD
  when:
    event:
      - cron
    cron:
      - renew-vault-tokens
